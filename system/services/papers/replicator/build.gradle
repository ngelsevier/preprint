plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

apply plugin: 'java'

ext {
    portable_classpath = true
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDirs = files('src/integration-test/java')
        }

        resources.srcDirs = files('src/integration-test/resources')
    }

    functionalTest {
        java {
            srcDirs = files('src/functional-test/java')
        }

        resources.srcDirs = files('src/functional-test/resources')
    }

    oldPlatformContractTest {
        java {
            srcDirs = files('src/old-platform-contract-test/java')
        }

        resources.srcDirs = files('src/old-platform-contract-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom compile
    integrationTestRuntime.extendsFrom runtime
}

dependencies {
    compile(
            'org.postgresql:postgresql:42.2.2',
            "io.dropwizard:dropwizard-core:${dropwizardVersion}",
            "io.dropwizard:dropwizard-client:${dropwizardVersion}",
            "io.dropwizard:dropwizard-jdbi:${dropwizardVersion}",
            'io.github.resilience4j:resilience4j-retry:0.12.1',
            parent.project('shared'),
            project(':shared:kms')
    )

    testCompile(
            'junit:junit:4.12',
            'org.hamcrest:java-hamcrest:2.0.0.0',
            'org.mockito:mockito-core:2.18.0',
            "io.dropwizard:dropwizard-testing:${dropwizardVersion}",
            parent.project('shared:test-support'),
            project(':test:support')
    )

    integrationTestCompile(
            'junit:junit:4.12',
            'org.hamcrest:java-hamcrest:2.0.0.0',
            "io.dropwizard:dropwizard-testing:${dropwizardVersion}",
            parent.project('shared:test-support'),
            project(':test:support'),
            project(':test:support:fake-old-platform'),
    )

    functionalTestCompile(
            'junit:junit:4.12',
            'org.hamcrest:java-hamcrest:2.0.0.0',
            project(':test:support'),
            project(':test:support:fake-old-platform'),
            project
    )

    oldPlatformContractTestCompile(
            'com.jayway.jsonpath:json-path:2.3.0',
            'com.jayway.jsonpath:json-path-assert:2.2.0',
            project(':test:support'),
            project(':test:support:old-platform-contract-tests'),
            project(':test:support:fake-old-platform'),
    )
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter 'test', 'oldPlatformContractTest'
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    shouldRunAfter 'test', 'integrationTest', 'oldPlatformContractTest'
}

task oldPlatformContractTest(type: Test) {
    description = 'Runs the old platform contract tests.'
    group = 'verification'
    testClassesDir = sourceSets.oldPlatformContractTest.output.classesDir
    classpath = sourceSets.oldPlatformContractTest.runtimeClasspath
    shouldRunAfter 'test'

    exclude 'com/ssrn/test/support/standalone_test_runner/AutoScanningTestSuite*'
}

shadowJar {
    from sourceSets.oldPlatformContractTest.output
    configurations = [
            project.configurations.oldPlatformContractTestRuntime,
    ]
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': 'com.ssrn.test.support.old_platform_contract_test.TestRunner'
    }
    baseName = 'old-platform-contract-tests'
    classifier = null
}
