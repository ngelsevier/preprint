input {
  beats {
    port => 5044
    client_inactivity_timeout => 6000
  }
}

filter {
  if [type] == "request" {
    grok {
      match => { "message" => "%{IPORHOST:inbound_request_client_ip} - %{HTTPDUSER:inbound_request_client_user} \[%{HTTPDATE:event_time}\] \"%{WORD:inbound_request_http_method} %{NOTSPACE:inbound_request_request_path} HTTP/%{NUMBER:inbound_request_http_version:float}\" %{NUMBER:inbound_request_response_code:int} (?:%{NUMBER:inbound_request_response_bytes:int}|-) %{QUOTEDSTRING:inbound_request_http_referrer} %{QUOTEDSTRING:inbound_request_http_user_agent} %{BASE10NUM:inbound_request_request_handling_time:float}" }
      match => { "message" => "(?<message>.*)" }
      tag_on_timeout => "_groktimeout"
      timeout_millis => 2000
    }
    mutate {
      replace => { "type" => "inbound-request" }
    }
  }

  if [type] == "log" {
    mutate {
      gsub => [ "message", "^!", "" ]
    }

    grok {
      match =>    { "message" => "%{WORD:level}\s+\[(?<event_time>%{YEAR}-%{MONTHNUM2}-%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND})\] (?<logger>[^:]+): %{GREEDYDATA:log_message}" }
      remove_field => [ "message" ]
      tag_on_timeout => "_groktimeout"
      timeout_millis => 2000
    }

    if [level] == "INFO" {
      if [log_message] =~ '^\d+ \* (Sending client request|Client response received)' {
        grok {
          match => {"log_message" => "%{NUMBER:outbound_request_id:int} \* (?<outbound_request_description>(?:Sending client request|Client response received)) on thread (?:(dw|Thread|ForkJoinPool.\w+-\w+)-\d+)(?<inbound_request_path>.*)\n%{NUMBER} (?:> %{WORD:outbound_request_method} %{URI:outbound_request_url}|< %{NUMBER:outbound_request_response_code:int})%{GREEDYDATA:outbound_request_content}"}
          remove_field => [ "log_message" ]
          tag_on_timeout => "_groktimeout"
          timeout_millis => 2000
        }

        if 'request' in [outbound_request_description] {
          mutate {
            update => { "type" => "outbound-request" }
            gsub => [ "outbound_request_content", "(\n\d+ > Authorization: )[^\n]+", "\n\1*******************" ]
          }
        }

        if 'response' in [outbound_request_description] {
          mutate {
            update => { "type" => "outbound-request-response" }
          }
        }
      }
    }
    if [level] == "ERROR" {
        mutate {
          replace => { "type" => "exception" }
        }

        if [logger] =~ /UnhandledExceptionMapper/ {
          mutate {
            replace => { "type" => "unhandled-exception" }
          }
        }

        if [log_message] =~ '^.+?(?:\n|:) ' {
            grok {
              match => { "log_message" => "(?<error_message>.+?)(?:\n|:) (?<exception>[^:]+): (?<exception_message>[^\n]+)(\n?)%{GREEDYDATA:stack_trace}" }
              remove_field => [ "log_message" ]
              tag_on_timeout => "_groktimeout"
              timeout_millis => 2000
            }
        }
    }
  }

  if [fields][service] {
    mutate {
      add_field => {"service" => "%{[fields][service]}"}
      remove_field => [ "[fields][service]" ]
    }
  }

  if [fields][version] {
    mutate {
      add_field => {"version" => "%{[fields][version]}"}
      remove_field => [ "[fields][version]" ]
    }
  }

  if [event_time] {
    date {
      match => [ "event_time", "yyyy-MM-dd HH:mm:ss,SSS", "dd/MMM/yyyy:HH:mm:ss Z" ]
      remove_field => [ "event_time" ]
    }
  }

}

output {
    if "_grokparsefailure" in [tags] {
        # write events that didn't match to a file
        file { "path" => "/tmp/grok_failures.txt" }
    } else if "_groktimeout" in [tags] {
        # write events that timed-up to a file
        file { "path" => "/tmp/grok_timeout.txt" }
    } else {
        if [type] == "inbound-request" and [service] == "frontend-website" {
            amazon_es {
                hosts => ["${AWS_ELASTICSEARCH_HOST:logging-index}"]
                index => "frontend-accesslog-%{+YYYY.MM.dd}"
                region => "${AWS_ELASTICSEARCH_REGION:oxford-north-1}"
                port => "${AWS_ELASTICSEARCH_PORT:9200}"
                protocol => "${AWS_ELASTICSEARCH_PROTOCOL:http}"
            }
        }
        amazon_es {
            hosts => ["${AWS_ELASTICSEARCH_HOST:logging-index}"]
            region => "${AWS_ELASTICSEARCH_REGION:oxford-north-1}"
            port => "${AWS_ELASTICSEARCH_PORT:9200}"
            protocol => "${AWS_ELASTICSEARCH_PROTOCOL:http}"
        }
    }
}

